/**
 * TODO MODEL - Database Schema Definition
 *
 * This file defines the structure (schema) of Todo documents in MongoDB.
 * Think of it as a blueprint that tells MongoDB:
 * - What fields each todo should have
 * - What data type each field should be
 * - What validation rules to enforce
 */

import mongoose from 'mongoose';

/**
 * SCHEMA DEFINITION
 *
 * A schema in Mongoose is like a template that defines the structure
 * of documents within a MongoDB collection. It enforces data consistency.
 *
 * FIELDS EXPLAINED:
 *
 * 1. text: The actual todo task description
 *    - type: String - Only text is allowed
 *    - required: true - Cannot save without this field
 *    - trim: true - Automatically removes spaces from start/end
 *
 * 2. createdAt: Timestamp when todo was created
 *    - type: Date - Stores date and time
 *    - default: Date.now - Automatically sets current time when created
 *
 * EXAMPLE DOCUMENT:
 * {
 *   _id: "507f1f77bcf86cd799439011",  // Auto-generated by MongoDB
 *   text: "Buy groceries",
 *   createdAt: "2024-01-15T10:30:00.000Z"
 * }
 */
const todoSchema = new mongoose.Schema({
  // The task description (e.g., "Buy milk", "Finish homework")
  text: {
    type: String,        // Must be text
    required: true,      // Cannot be empty - validation will fail without it
    trim: true          // Removes leading/trailing whitespace automatically
  },

  // Timestamp for when this todo was created
  createdAt: {
    type: Date,          // Stores date and time
    default: Date.now   // Automatically set to current time if not provided
  }
});

/**
 * CREATE MODEL FROM SCHEMA
 *
 * mongoose.model() creates a model from the schema definition.
 * A model is a class we use to interact with a specific MongoDB collection.
 *
 * ARGUMENTS:
 * 1. 'Todo' - Name of the model (MongoDB will create a 'todos' collection)
 *    Note: MongoDB automatically pluralizes and lowercases the name
 * 2. todoSchema - The schema we defined above
 *
 * WHAT YOU CAN DO WITH THIS MODEL:
 * - Todo.find() - Find all todos
 * - Todo.create() - Create new todo
 * - Todo.findById() - Find todo by ID
 * - Todo.findByIdAndDelete() - Delete todo by ID
 * - new Todo({ text: "..." }).save() - Create and save new todo
 */
const Todo = mongoose.model('Todo', todoSchema);

// Export the model so it can be used in server.js to interact with database
export default Todo;
